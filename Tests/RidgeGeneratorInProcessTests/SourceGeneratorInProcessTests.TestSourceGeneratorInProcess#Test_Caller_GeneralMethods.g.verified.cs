//HintName: Test_Caller_GeneralMethods.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Ridge.WebApplicationFactoryTools;
using Ridge.HttpRequestFactoryMiddlewares;
using Ridge;
using Ridge.LogWriter;
using Ridge.Serialization;
using Ridge.Response;
using Ridge.Setup;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
namespace TestNamespace.Controller
{

/// <summary>
/// Generated API caller. Calls <see cref="TestNamespace.Controller.Test" />
/// </summary>
public partial class TestCaller<TEntryPoint> where TEntryPoint : class
{
    private ApplicationCaller<TEntryPoint> _applicationCaller;

    /// <summary>
    ///     Create controller caller.
    /// </summary>
    /// <param name="webApplicationFactory">Pass WebApplicationFactory{TEntryPoint} to this parameter. This parameter is object because generator can not ensure that containing assembly 
    ///    references correct nuget package.
    /// </param>
    /// <param name="logWriter">
    ///     Used to log requests and responses from server.
    ///     Use <see cref="XunitLogWriter" /> or <see cref="NunitLogWriter" /> or implement custom <see cref="ILogWriter" />
    /// </param>
    /// <param name="ridgeSerializer">
    ///     Serializer used to serialize and deserialize requests.
    ///     Serializer is by default chosen based on asp.net settings. If you need custom serializer implement
    ///     <see cref="IRequestResponseSerializer" />.
    /// </param>
    public TestCaller(
        object webApplicationFactory,
        ILogWriter? logWriter = null,
        IRequestResponseSerializer? ridgeSerializer = null)
    {
        _applicationCaller = new ApplicationCaller<TEntryPoint>(webApplicationFactory, logWriter, ridgeSerializer);
    }

    /// <summary>
    ///     Customize WebApplicationFactoryHttpClient by WebApplicationFactoryClientOptions. 
    /// </summary>
    /// <param name="webApplicationFactoryClientOptions">Options used to configure WebApplicationFactoryHttpClient.</param>
    public void SetHttpClientOptions(WebAppFactoryClientOptions webApplicationFactoryClientOptions)
    {
        _applicationCaller.SetHttpClientOptions(webApplicationFactoryClientOptions);
    }

    /// <summary>
    ///     Add one or many <see cref="DelegatingHandler"/> to httpClient.  
    /// </summary>
    /// <param name="delegatingHandler"><see cref="DelegatingHandler"/> to add.</param>
    public void AddHttpClientDelegationHandlers(
        params DelegatingHandler[] delegatingHandler)
    {
        _applicationCaller.AddDelegationHandler(delegatingHandler);
    }

    /// <summary>
    ///     Add one or many <see cref="HttpRequestFactoryMiddleware"/> which will be later used in pipeline to create HttpRequestMessage.
    /// </summary>
    /// <param name="httpRequestFactoryMiddlewares"><see cref="HttpRequestFactoryMiddleware"/>  to add.</param>
    public void AddHttpRequestFactoryMiddlewares(
        params HttpRequestFactoryMiddleware[] httpRequestFactoryMiddlewares)
    {
        _applicationCaller.AddHttpRequestFactoryMiddlewares(httpRequestFactoryMiddlewares);
    }

    /// <summary>
    ///     Add one or more headers to the requests. This method actually adds <see cref="HttpRequestFactoryMiddleware"/>
    ///     which then adds the header to requests.
    /// </summary>
    /// <param name="headers">Headers to add.</param>
    public void AddHeaders(
        params HttpHeader[] headers)
    {
        _applicationCaller.AddHeaders(headers);
    }
    
}
}
#nullable restore