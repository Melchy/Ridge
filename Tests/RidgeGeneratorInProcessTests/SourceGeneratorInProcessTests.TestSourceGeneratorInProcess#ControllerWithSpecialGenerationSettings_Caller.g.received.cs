//HintName: ControllerWithSpecialGenerationSettings_Caller.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0419

using Ridge.HttpRequestFactoryMiddlewares;
using Ridge.WebApplicationFactoryTools;
using Ridge;
using Ridge.LogWriter;
using Ridge.Serialization;
using Ridge.Response;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
namespace TestNamespace.Controller
{
    /// <summary>
    /// Generated Api caller. Calls <see cref="TestNamespace.Controller.ControllerWithSpecialGenerationSettings" />
    /// </summary>
    public class ControllerWithSpecialGenerationSettingsCaller<TEntryPoint> where TEntryPoint : class
    {
        private readonly ApplicationCaller<TEntryPoint> _applicationCaller;
        /// <summary>
        /// Creates controller caller. 
        /// </summary>
        /// <param name="applicationCaller">
        ///     Application caller which will be used to call application.
        /// </param>
        public ControllerWithSpecialGenerationSettingsCaller(ApplicationCaller<TEntryPoint> applicationCaller)
        {
            _applicationCaller = applicationCaller;
        }
                /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.ControllerWithSpecialGenerationSettings.SimpleGet" />. 
        /// </summary> 
        public async Task<HttpCallResponse<string>> CallSimpleGet(int? @addedParameter, string? @addedOptionalParameter = default, System.Threading.Tasks.Task<string>? @addedGenericOptionalParameter = default, object? @renamed = default, params object[] customParameters)
        {
            var methodName = nameof(TestNamespace.Controller.ControllerWithSpecialGenerationSettings.SimpleGet);
            var arguments = new List<(string, object?, Type?)>()
            { 
                ("addedParameter", @addedParameter, ((object?)@addedParameter)?.GetType()),
                ("addedOptionalParameter", @addedOptionalParameter, ((object?)@addedOptionalParameter)?.GetType()),
                ("addedGenericOptionalParameter", @addedGenericOptionalParameter, ((object?)@addedGenericOptionalParameter)?.GetType()),
                ("renamed", @renamed, ((object?)@renamed)?.GetType()),
            };

            var actionParameters = new Type[] {
            };
           return await _applicationCaller.CallAction<string,TestNamespace.Controller.ControllerWithSpecialGenerationSettings>(arguments, methodName, actionParameters, customParameters);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.ControllerWithSpecialGenerationSettings.TypeTransformation" />. 
        /// </summary> 
        public async Task<HttpCallResponse<string>> CallTypeTransformation(int? @addedParameter, String? @renamed = default, string? @addedOptionalParameter = default, System.Threading.Tasks.Task<string>? @addedGenericOptionalParameter = default, object? @renamed1 = default, params object[] customParameters)
        {
            var methodName = nameof(TestNamespace.Controller.ControllerWithSpecialGenerationSettings.TypeTransformation);
            var arguments = new List<(string, object?, Type?)>()
            { 
                ("renamed", @renamed, ((object?)@renamed)?.GetType()),
                ("addedParameter", @addedParameter, ((object?)@addedParameter)?.GetType()),
                ("addedOptionalParameter", @addedOptionalParameter, ((object?)@addedOptionalParameter)?.GetType()),
                ("addedGenericOptionalParameter", @addedGenericOptionalParameter, ((object?)@addedGenericOptionalParameter)?.GetType()),
                ("renamed1", @renamed1, ((object?)@renamed1)?.GetType()),
            };

            var actionParameters = new Type[] {
                typeof(float),
            };
           return await _applicationCaller.CallAction<string,TestNamespace.Controller.ControllerWithSpecialGenerationSettings>(arguments, methodName, actionParameters, customParameters);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.ControllerWithSpecialGenerationSettings.ActionWithOptionalParameter" />. 
        /// </summary> 
        public async Task<HttpCallResponse<int?>> CallActionWithOptionalParameter(string @test2, string @test3, string[] @test, int? @addedParameter, String? @renamed = default, String? @renamed1 = default, string @optionalWithoutTransformation = "asd", char @optionalChar = 'z', int @optionalInt = 1, double @optionalDouble = 2.3, int @optionalWithFullDefault = 0, int @defaultConst = 1, int @optional = 0, string? @addedOptionalParameter = default, System.Threading.Tasks.Task<string>? @addedGenericOptionalParameter = default, object? @renamed2 = default, params object[] customParameters)
        {
            var methodName = nameof(TestNamespace.Controller.ControllerWithSpecialGenerationSettings.ActionWithOptionalParameter);
            var arguments = new List<(string, object?, Type?)>()
            { 
                ("test2", @test2, ((object?)@test2)?.GetType()),
                ("renamed", @renamed, ((object?)@renamed)?.GetType()),
                ("test3", @test3, ((object?)@test3)?.GetType()),
                ("renamed1", @renamed1, ((object?)@renamed1)?.GetType()),
                ("test", @test, ((object?)@test)?.GetType()),
                ("optionalWithoutTransformation", @optionalWithoutTransformation, ((object?)@optionalWithoutTransformation)?.GetType()),
                ("optionalChar", @optionalChar, ((object?)@optionalChar)?.GetType()),
                ("optionalInt", @optionalInt, ((object?)@optionalInt)?.GetType()),
                ("optionalDouble", @optionalDouble, ((object?)@optionalDouble)?.GetType()),
                ("optionalWithFullDefault", @optionalWithFullDefault, ((object?)@optionalWithFullDefault)?.GetType()),
                ("defaultConst", @defaultConst, ((object?)@defaultConst)?.GetType()),
                ("optional", @optional, ((object?)@optional)?.GetType()),
                ("addedParameter", @addedParameter, ((object?)@addedParameter)?.GetType()),
                ("addedOptionalParameter", @addedOptionalParameter, ((object?)@addedOptionalParameter)?.GetType()),
                ("addedGenericOptionalParameter", @addedGenericOptionalParameter, ((object?)@addedGenericOptionalParameter)?.GetType()),
                ("renamed2", @renamed2, ((object?)@renamed2)?.GetType()),
            };

            var actionParameters = new Type[] {
                typeof(string),
                typeof(float),
                typeof(string),
                typeof(float),
                typeof(string[]),
                typeof(string),
                typeof(char),
                typeof(int),
                typeof(double),
                typeof(int),
                typeof(int),
                typeof(int),
            };
           return await _applicationCaller.CallAction<int?,TestNamespace.Controller.ControllerWithSpecialGenerationSettings>(arguments, methodName, actionParameters, customParameters);
        }

 }
}
#pragma warning restore CS0419
#nullable restore