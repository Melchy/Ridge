//HintName: Test_Client.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#pragma warning disable CS0419

using Ridge.HttpRequestFactoryMiddlewares;
using Ridge;
using Ridge.LogWriter;
using Ridge.Serialization;
using Ridge.Response;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
using Ridge.Parameters.AdditionalParams;
namespace TestNamespace.Controller
{
    /// <summary>
    /// Generated Api client. Calls <see cref="TestNamespace.Controller.Test" />
    /// </summary>
    public class TestClient
    {
        private readonly ApplicationClient _applicationClient;
        /// <summary>
        /// Creates client for controller. 
        /// </summary>
        /// <param name="httpClient">
        ///     HttpClient which will be used to call application.
        /// </param>
        /// <param name="serviceProvider">
        ///     Application serviceProvider.
        /// </param>
        public TestClient(HttpClient httpClient, IServiceProvider serviceProvider)
        {
            _applicationClient = new ApplicationClient(httpClient, serviceProvider);
        }
                /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.TokenRemoved" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallTokenRemoved(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.TokenRemoved);
            var actionParameters = new Type[] {
                typeof(System.Threading.CancellationToken),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("token",typeof(System.Threading.CancellationToken),false,null,null,typeof(System.Threading.CancellationToken), "token", true, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo" />. 
        /// </summary> 
        public async Task<HttpCallResponse<string>> CallFoo(System.Threading.Tasks.Task<string> @a, bool @b, int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo);
            var actionParameters = new Type[] {
                typeof(System.Threading.Tasks.Task<string>),
                typeof(bool),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("a",typeof(System.Threading.Tasks.Task<string>),false,null,@a,typeof(System.Threading.Tasks.Task<string>), "a", false, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("b",typeof(bool),false,null,@b,typeof(bool), "b", false, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
           return await _applicationClient.CallAction<string,TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo1" />. 
        /// </summary> 
        public async Task<HttpCallResponse<string>> CallFoo1(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo1);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
           return await _applicationClient.CallAction<string,TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo2" />. 
        /// </summary> 
        public async Task<HttpCallResponse<string>> CallFoo2(int @addedParameter, int @addedParameterX, int @addedParameterY, string? @renamed = default, string? @renamed1 = default, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo2);
            var actionParameters = new Type[] {
                typeof(int),
                typeof(int),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("b",typeof(int),true,0,@renamed,typeof(string), "renamed", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("c",typeof(int),true,0,@renamed1,typeof(string), "renamed1", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
           return await _applicationClient.CallAction<string,TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo3" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallFoo3(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo3);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo4" />. 
        /// </summary> 
        public async Task<HttpCallResponse<int>> CallFoo4(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo4);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
           return await _applicationClient.CallAction<int,TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo5" />. 
        /// </summary> 
        public async Task<HttpCallResponse<TestNamespace.Controller.Foo<int>>> CallFoo5(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo5);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
           return await _applicationClient.CallAction<TestNamespace.Controller.Foo<int>,TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo6" />. 
        /// </summary> 
        public async Task<HttpCallResponse<TestNamespace.Controller.Foo<int>>> CallFoo6(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo6);
            var actionParameters = new Type[] {
                typeof(object),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("a",typeof(object),false,null,null,typeof(object), "a", true, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
           return await _applicationClient.CallAction<TestNamespace.Controller.Foo<int>,TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo7" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallFoo7(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo7);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo8" />. 
        /// </summary> 
        public async Task<HttpCallResponse<int>> CallFoo8(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo8);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
           return await _applicationClient.CallAction<int,TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo9" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallFoo9(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo9);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.Foo20" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallFoo20(int[] @b, int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.Foo20);
            var actionParameters = new Type[] {
                typeof(int[]),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("b",typeof(int[]),false,null,@b,typeof(int[]), "b", false, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.EventFoo" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallEventFoo(string @event, int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.EventFoo);
            var actionParameters = new Type[] {
                typeof(string),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("event",typeof(string),false,null,@event,typeof(string), "event", false, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.EventFoo5" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallEventFoo5(string @a, string @a, int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.EventFoo5);
            var actionParameters = new Type[] {
                typeof(string),
                typeof(string),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("a",typeof(string),false,null,@a,typeof(string), "a", false, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("a",typeof(string),false,null,@a,typeof(string), "a", false, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.EventFoo6" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallEventFoo6(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.EventFoo6);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.EventFoo7" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallEventFoo7(int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.EventFoo7);
            var actionParameters = new Type[] {
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.EventFoo8" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallEventFoo8(string @a, int @addedParameter, int @addedParameterX, int @addedParameterY, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.EventFoo8);
            var actionParameters = new Type[] {
                typeof(string),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("a",typeof(string),false,null,@a,typeof(string), "a", false, false, false,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

        /// <summary>
        ///     Calls <see cref="TestNamespace.Controller.Test.EventFoo12" />. 
        /// </summary> 
        public async Task<HttpCallResponse> CallEventFoo12(int @addedParameter, int @addedParameterX, int @addedParameterY, string? @parameterName = default, int? @addedParameterOptional = default, params AdditionalParameter[] additionalParameters)
        {
            var methodName = nameof(TestNamespace.Controller.Test.EventFoo12);
            var actionParameters = new Type[] {
                typeof(float),
            };
            var parametersAndTransformations = new List<RawParameterAndTransformationInfo>()
            { 
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>("a",typeof(float),false,0,@parameterName,typeof(string), "parameterName", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterOptional,typeof(int?), "addedParameterOptional", false, true, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameter,typeof(int), "addedParameter", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterX,typeof(int), "addedParameterX", false, false, true,methodName,actionParameters),
                RawParameterAndTransformationInfo.Create<TestNamespace.Controller.Test>(null,null,null,0,@addedParameterY,typeof(int), "addedParameterY", false, false, true,methodName,actionParameters),
            };
            return await _applicationClient.CallAction<TestNamespace.Controller.Test>(methodName, actionParameters, additionalParameters, parametersAndTransformations);
        }

 }
}
#pragma warning restore CS0419
#nullable restore