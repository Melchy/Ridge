//HintName: Test_Caller_GeneralMethods.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Ridge.Caller;
using Ridge.LogWriter;
using Ridge.Serialization;
using Ridge.Transformers;
using Ridge.Response;
using Ridge.Setup;
using Ridge.ActionInfo;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
namespace TestNamespace.Controller
{

/// <summary>
/// Generated Api client for tests. Calls <see cref="TestNamespace.Controller.TestCaller" />
/// </summary>
public partial class TestCaller<TEntryPoint> : IControllerCaller where TEntryPoint : class
{
    HttpClient IControllerCaller.HttpClient { get => _webApplicationFactorySetupHelpers.CreateClient(((IControllerCaller)this).LogWriter, _httpClientOptions, _delegatingHandlers.ToArray()); }
    IServiceProvider IControllerCaller.ServiceProvider { get; set; } = null!;
    ILogWriter? IControllerCaller.LogWriter { get; set; } = null!;
    IRequestResponseSerializer? IControllerCaller.RidgeSerializer { get; set; } = null!;
    HttpRequestFactoryMiddlewareBuilder IControllerCaller.HttpRequestFactoryMiddlewareBuilder { get; }  = new();
    private Test? _httpClientOptions;
    private List<DelegatingHandler> _delegatingHandlers = new List<DelegatingHandler>();
    private WebApplicationFactorySetupHelpers<TEntryPoint> _webApplicationFactorySetupHelpers;

    /// <summary>
    ///     Create controller factory.
    /// </summary>
    /// <param name="webApplicationFactory">WebApplicationFactory<TEntryPoint>. This parameter is object because generator can not ensure that containing assembly 
    ///    references correct nuget package</param>
    /// <param name="logWriter">
    ///     Used to log requests and responses from server.
    ///     Use <see cref="XunitLogWriter" /> or <see cref="NunitLogWriter" /> or <see cref="NunitProgressLogWriter"/> or implement custom <see cref="ILogWriter" />
    /// </param>
    /// <param name="ridgeSerializer">
    ///     Serializer used to serialize and deserialize requests.
    ///     Serializer is by default chosen based on asp.net settings. If you need custom serializer implement
    ///     <see cref="IRequestResponseSerializer" />.
     /// </param>
    public TestCaller(
        object webApplicationFactory,
        ILogWriter? logWriter = null,
        IRequestResponseSerializer? ridgeSerializer = null)
    {
        _webApplicationFactorySetupHelpers = new WebApplicationFactorySetupHelpers<TEntryPoint>(webApplicationFactory);
        _webApplicationFactorySetupHelpers.RegisterDependencies();
        ((IControllerCaller)this).ServiceProvider = _webApplicationFactorySetupHelpers.GetServices();
        ((IControllerCaller)this).LogWriter = logWriter;
        ((IControllerCaller)this).RidgeSerializer = ridgeSerializer;
    }

    
    public void SetHttpClientOptions(Test options)
    {
        _httpClientOptions = options;
    }
    
    public void AddHttpClientDelegationHandler(DelegatingHandler delegatingHandler)
    {
        _delegatingHandlers.Add(delegatingHandler);
    }

    /// <summary>
    ///     Adds <see cref="IActionInfoTransformer"/> which will be later used to transform <see cref="IActionInfo"/>s.
    /// </summary>
    /// <param name="actionInfoTransformers"><see cref="IActionInfoTransformer"/>  to add.</param>
    public void AddHttpRequestFactoryMiddleware(
        params HttpRequestFactoryMiddleware[] httpRequestFactoryMiddlewares)
    {
        ((IControllerCaller)this).HttpRequestFactoryMiddlewareBuilder.AddHttpRequestFactoryMiddlewares(httpRequestFactoryMiddlewares);
    }

    /// <summary>
    ///     Adds headers to the requests. This method actually adds <see cref="IActionInfoTransformer"/>
    ///     which then adds the header to requests.
    /// </summary>
    /// <param name="headers">Headers to add.</param>
    public void AddHeaders(params (string Key, string? Value)[] headers)
    {
        ((IControllerCaller)this).HttpRequestFactoryMiddlewareBuilder.AddHeaders(headers);
    }
    
}
}
#nullable restore