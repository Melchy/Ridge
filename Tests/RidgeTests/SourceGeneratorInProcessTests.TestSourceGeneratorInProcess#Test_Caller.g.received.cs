//HintName: Test_Caller.g.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
#pragma warning disable CS0419

using Ridge.Caller;
using Ridge.LogWriter;
using Ridge.Pipeline.Public;
using Ridge.Serialization;
using Ridge.Transformers;
using Ridge.Response;
using Ridge.ActionInfo;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
namespace TestNamespace.Controller
{

/// <summary>
/// Generated Api client for tests. Calls <see cref="TestNamespace.Controller.Test" />
/// </summary>
public partial class TestCaller : IControllerCaller
{
    
    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo" />.
    /// </summary>
    public async Task<HttpCallResponse<string>> Call_Foo(
            System.Threading.Tasks.Task<string> @a,
            bool @b,
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo);
        var arguments = new List<object?>()
        {
            @a,
            @b,
        };

        var actionParameters = new Type[] {
        typeof(System.Threading.Tasks.Task<string>),
        typeof(bool),
        };

        var caller = new ActionCaller();
        return await caller.CallAction<string,TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo1" />.
    /// </summary>
    public async Task<HttpCallResponse<string>> Call_Foo1(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo1);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        };

        var caller = new ActionCaller();
        return await caller.CallAction<string,TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo2" />.
    /// </summary>
    public async Task<HttpCallResponse<string>> Call_Foo2(
            String renamed,
            String renamed1,
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo2);
        var arguments = new List<object?>()
        {
            renamed,
            renamed,
        };

        var actionParameters = new Type[] {
        typeof(int),
        typeof(int),
        };

        var caller = new ActionCaller();
        return await caller.CallAction<string,TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo3" />.
    /// </summary>
    public async Task<HttpCallResponse> Call_Foo3(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo3);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        };

        var caller = new ActionCaller();
        return await caller.CallAction<TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo4" />.
    /// </summary>
    public async Task<HttpCallResponse<int>> Call_Foo4(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo4);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        };

        var caller = new ActionCaller();
        return await caller.CallAction<int,TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo5" />.
    /// </summary>
    public async Task<HttpCallResponse<TestNamespace.Controller.Foo<int>>> Call_Foo5(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo5);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        };

        var caller = new ActionCaller();
        return await caller.CallAction<TestNamespace.Controller.Foo<int>,TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo6" />.
    /// </summary>
    public async Task<HttpCallResponse<TestNamespace.Controller.Foo<int>>> Call_Foo6(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo6);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        typeof(object),
        };

        var caller = new ActionCaller();
        return await caller.CallAction<TestNamespace.Controller.Foo<int>,TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo7" />.
    /// </summary>
    public async Task<HttpCallResponse> Call_Foo7(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo7);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        };

        var caller = new ActionCaller();
        return await caller.CallAction<TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo8" />.
    /// </summary>
    public async Task<HttpCallResponse<int>> Call_Foo8(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo8);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        };

        var caller = new ActionCaller();
        return await caller.CallAction<int,TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo9" />.
    /// </summary>
    public async Task<HttpCallResponse> Call_Foo9(
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo9);
        var arguments = new List<object?>()
        {
        };

        var actionParameters = new Type[] {
        };

        var caller = new ActionCaller();
        return await caller.CallAction<TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.Foo20" />.
    /// </summary>
    public async Task<HttpCallResponse> Call_Foo20(
            int[] @b,
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.Foo20);
        var arguments = new List<object?>()
        {
            @b,
        };

        var actionParameters = new Type[] {
        typeof(int[]),
        };

        var caller = new ActionCaller();
        return await caller.CallAction<TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }


    /// <summary>
    ///     Calls <see cref="TestNamespace.Controller.Test.EventFoo" />.
    /// </summary>
    public async Task<HttpCallResponse> Call_EventFoo(
            string @event,
            int addedParameter,

            int? addedParameterOptional = default,
IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
        )
    {
        var methodName = nameof(TestNamespace.Controller.Test.EventFoo);
        var arguments = new List<object?>()
        {
            @event,
        };

        var actionParameters = new Type[] {
        typeof(string),
        };

        var caller = new ActionCaller();
        return await caller.CallAction<TestNamespace.Controller.Test>(arguments, methodName, this, actionParameters, headers, authenticationHeaderValue, actionInfoTransformers, httpRequestPipelineParts);
    }

}
}
#pragma warning restore CS0419
