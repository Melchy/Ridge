using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;

namespace RidgeSourceGenerator;

public static class SourceGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

    public static string GenerateExtensionClass(
        StringBuilder sb,
        ControllerToGenerate controllerToGenerate)
    {
        var className = $"{controllerToGenerate.Name}Caller";
        sb.Append(Header);
        sb.Append(@"
#nullable enable

using Ridge.Caller;
using Ridge.LogWriter;
using Ridge.Pipeline.Public;
using Ridge.Serialization;
using Ridge.Transformers;
using Ridge.Response;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
");
        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.Append(@"namespace ").AppendLine(controllerToGenerate.Namespace);
            sb.AppendLine("{");
        }

        sb.Append(@"
/// <summary>
/// Class generated using source generator to make strongly typed calls in tests.
/// </summary>
public class ");
        sb.Append(className);
        sb.Append(@"
{
    private readonly HttpClient _httpClient;
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogWriter? _logWriter;
    private readonly IRequestResponseSerializer? _ridgeSerializer;
    private readonly RequestBuilder _requestBuilder = new();

    /// <summary>
    ///     Create controller factory.
    /// </summary>
    /// <param name=""httpClient"">HttpClient used to call the server.</param>
    /// <param name=""serviceProvider"">ServiceProvider used to gather information about the server.</param>
    /// <param name=""logWriter"">
    ///     Used to log requests and responses from server.
    ///     Use <see cref=""XunitLogWriter"" /> or <see cref=""NunitLogWriter"" /> or <see cref=""NunitProgressLogWriter""/> or implement custom <see cref=""ILogWriter"" />
    /// </param>
    /// <param name=""ridgeSerializer"">
    ///     Serializer used to serialize and deserialize requests.
    ///     Serializer is by default chosen based on asp.net settings. If you need custom serializer implement
    ///     <see cref=""IRequestResponseSerializer"" />.
     /// </param>
    public ");
        sb.Append(className);
        sb.AppendLine(@"(
        HttpClient httpClient,
        IServiceProvider serviceProvider,
        ILogWriter? logWriter = null,
        IRequestResponseSerializer? ridgeSerializer = null)
    {
        _httpClient = httpClient;
        _serviceProvider = serviceProvider;
        _logWriter = logWriter;
        _ridgeSerializer = ridgeSerializer;
    }

    /// <summary>
    ///     Add <see cref=""IHttpRequestPipelinePart""/> which will be used to transform <see cref=""HttpRequestMessage""/>s.
    /// </summary>
    /// <param name=""httpRequestPipelineParts""><see cref=""IHttpRequestPipelinePart""/> to add.</param>
    public void AddHttpRequestPipelineParts(
        params IHttpRequestPipelinePart[] httpRequestPipelineParts)
    {
        _requestBuilder.AddHttpRequestPipelineParts(httpRequestPipelineParts);
    }

    /// <summary>
    ///     Adds <see cref=""IActionInfoTransformer""/> which will be later used to transform <see cref=""IActionInfo""/>s.
    /// </summary>
    /// <param name=""actionInfoTransformers""><see cref=""IActionInfoTransformer""/>  to add.</param>
    public void AddActionInfoTransformers(
        params IActionInfoTransformer[] actionInfoTransformers)
    {
        _requestBuilder.AddActionInfoTransformers(actionInfoTransformers);
    }

    /// <summary>
    ///     Adds headers to the requests. This method actually adds <see cref=""IActionInfoTransformer""/>
    ///     which then adds the header to requests.
    /// </summary>
    /// <param name=""headers"">Headers to add.</param>
    public void AddHeaders(params (string Key, string? Value)[] headers)
    {
        _requestBuilder.AddHeaders(headers);
    }

    /// <summary>
    ///     Adds <see cref=""AuthenticationHeaderValue""/> to the requests. This method actually adds <see cref=""IActionInfoTransformer""/>
    ///     which then adds the header to requests.
    /// </summary>
    /// <param name=""authenticationHeaderValue""><see cref=""AuthenticationHeaderValue""/> to add.</param>
    public void AddAuthenticationHeaderValue(
        AuthenticationHeaderValue authenticationHeaderValue)
    {
        _requestBuilder.AddAuthenticationHeaderValue(authenticationHeaderValue);
    }
    ");


        foreach (var publicMethod in controllerToGenerate.PublicMethods)
        {
            if (publicMethod.IsGenericMethod)
            {
                continue;
            }

            var syntax = ((MethodDeclarationSyntax?)publicMethod
               .DeclaringSyntaxReferences.FirstOrDefault()
              ?.GetSyntax());

            // action must be explicitly defined
            if (syntax == null)
            {
                continue;
            }

            string? returnType = publicMethod.ReturnType.Name;

            if (publicMethod.ReturnType is not INamedTypeSymbol fullReturnType)
            {
                continue;
            }

            sb.Append(@"
    /// <summary>
    ///     Calls <see cref=""");
            sb.Append(controllerToGenerate.FullyQualifiedName);
            sb.Append(".");
            sb.Append(publicMethod.Name);
            sb.AppendLine(@""" />.
    /// </summary>");
            sb.Append(@"    public async ");

            if (controllerToGenerate.UseHttpResponseMessageAsReturnType)
            {
                sb.Append("Task<HttpResponseMessage>");
            }
            else
            {
                returnType = GetActualReturnType(fullReturnType);

                if (returnType == null)
                {
                    sb.Append("Task<HttpCallResponse>");
                }
                else
                {
                    sb.Append($"Task<HttpCallResponse<{returnType}>>");
                }
            }

            sb.Append(" ");
            sb.Append("Call_");
            sb.Append(publicMethod.Name);
            sb.Append("(");

            var nonRemovedArgumentNames = new List<string>();

            var stringBuilderForOptionalParameters = new StringBuilder();
            foreach (var publicMethodParameter in publicMethod.Parameters)
            {
                ProcessParameter(sb, stringBuilderForOptionalParameters, controllerToGenerate, publicMethodParameter, nonRemovedArgumentNames);
            }

            sb.Append(stringBuilderForOptionalParameters);

            sb.AppendLine(@"IEnumerable<(string Key, string? Value)>? headers = null,
            AuthenticationHeaderValue? authenticationHeaderValue = null,
            IEnumerable<IActionInfoTransformer>? actionInfoTransformers = null,
            IEnumerable<IHttpRequestPipelinePart>? httpRequestPipelineParts = null
            )");

            sb.AppendLine(@"    {");
            sb.Append(@"        var methodName = ");
            sb.Append("nameof(");
            sb.Append(controllerToGenerate.FullyQualifiedName);
            sb.Append(".");
            sb.Append(publicMethod.Name);
            sb.AppendLine(");");

            sb.Append(@"        var controllerType = typeof(");
            sb.Append(controllerToGenerate.FullyQualifiedName);
            sb.AppendLine(");");

            sb.AppendLine(@"        var arguments = new List<object?>()");
            sb.AppendLine(@"        {");
            foreach (var parameterName in nonRemovedArgumentNames)
            {
                sb.Append(@"            ");
                sb.Append(parameterName);
                sb.AppendLine(",");
            }

            sb.AppendLine(@"        };");


            sb.AppendLine(@"
        var requestBuilder = _requestBuilder.CreateNewBuilderByCopyingExisting();
        requestBuilder.AddHeaders(headers);
        requestBuilder.AddAuthenticationHeaderValue(authenticationHeaderValue);
        requestBuilder.AddHttpRequestPipelineParts(httpRequestPipelineParts);
        requestBuilder.AddActionInfoTransformers(actionInfoTransformers);
        var caller = new ActionCaller(requestBuilder,
            _logWriter,
            _httpClient,
            _serviceProvider,
            _ridgeSerializer);");


            sb.AppendLine(@"
        var methodInfo = controllerType.GetMethod(methodName, new Type[] {");

            foreach (var publicMethodParameter in publicMethod.Parameters)
            {
                sb.Append(@"
            ");
                sb.Append("typeof(");
                sb.Append(publicMethodParameter.Type.ToDisplayString(NullableFlowState.None));
                sb.Append("),");
            }

            sb.AppendLine(@"
        });");
            sb.AppendLine(@"
        if (methodInfo == null)
        {
            throw new InvalidOperationException($""Method with name {methodName} not found in class {controllerType.FullName}."");
        }
        ");

            if (controllerToGenerate.UseHttpResponseMessageAsReturnType)
            {
                sb.AppendLine(@"        return await caller.CallActionWithHttpResponseMessageResult(arguments, methodInfo);");
            }
            else
            {
                if (returnType == null)
                {
                    sb.AppendLine(@"        return await caller.CallAction(arguments, methodInfo);");
                }
                else
                {
                    sb.AppendLine($@"        return await caller.CallAction<{returnType}>(arguments, methodInfo);");
                }
            }
            
            sb.AppendLine(@"    }");
            sb.AppendLine();
        }

        sb.AppendLine("}");

        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.AppendLine("}");
        }


        return sb.ToString();
    }

    private static void ProcessParameter(
        StringBuilder sb,
        StringBuilder stringBuilderForOptionalParameters,
        ControllerToGenerate controllerToGenerate,
        IParameterSymbol publicMethodParameter,
        List<string> nonRemovedArgumentNames)
    {
        var fromServicesAttribute = publicMethodParameter.GetAttributes().FirstOrDefault(x => x.AttributeClass?.Name == "FromServicesAttribute");
        StringBuilder builderToUseForCurrentParameter;
        if (fromServicesAttribute != null)
        {
            return;
        }

        string resultName;
        var typeMustBeTransformed =
            controllerToGenerate.ParameterTransformations.TryGetValue(
                publicMethodParameter.Type.Name,
                out var result);

        if (typeMustBeTransformed)
        {
            if (result.ToType == "Void")
            {
                return;
            }

            if (result.Optional)
            {
                builderToUseForCurrentParameter = stringBuilderForOptionalParameters;
            }
            else
            {
                builderToUseForCurrentParameter = sb;
            }

            builderToUseForCurrentParameter.Append(@"
            ");


            if (result.Optional)
            {
                var typeWithNullable = result.ToType.TrimEnd('?');
                builderToUseForCurrentParameter.Append(typeWithNullable);
                builderToUseForCurrentParameter.Append("?");
            }
            else
            {
                builderToUseForCurrentParameter.Append(result.ToType);
            }

            builderToUseForCurrentParameter.Append(" ");
            if (result.NewName != null)
            {
                builderToUseForCurrentParameter.Append(result.NewName);
                if (result.NumberOfUsagesOfThisName == 0)
                {
                    resultName = result.NewName;
                }
                else
                {
                    resultName = $"{result.NewName}{result.NumberOfUsagesOfThisName}";
                    builderToUseForCurrentParameter.Append(result.NumberOfUsagesOfThisName);
                }

                result.NumberOfUsagesOfThisName++;
            }
            else
            {
                builderToUseForCurrentParameter.Append(publicMethodParameter.Name);
                resultName = publicMethodParameter.Name;
            }

            if (result.Optional)
            {
                builderToUseForCurrentParameter.Append(" = default");
            }
        }
        else
        {
            if (publicMethodParameter.IsOptional)
            {
                builderToUseForCurrentParameter = stringBuilderForOptionalParameters;
            }
            else
            {
                builderToUseForCurrentParameter = sb;
            }

            builderToUseForCurrentParameter.Append(@"
            ");

            resultName = publicMethodParameter.Name;
            builderToUseForCurrentParameter.Append(publicMethodParameter.Type);
            builderToUseForCurrentParameter.Append(" ");
            builderToUseForCurrentParameter.Append(publicMethodParameter.Name);

            if (publicMethodParameter.HasExplicitDefaultValue)
            {
                builderToUseForCurrentParameter.Append("= ");
                if (publicMethodParameter.ExplicitDefaultValue == null)
                {
                    builderToUseForCurrentParameter.Append("default");
                }
                else if (publicMethodParameter.ExplicitDefaultValue is string)
                {
                    builderToUseForCurrentParameter.Append("\"");
                    builderToUseForCurrentParameter.Append(publicMethodParameter.ExplicitDefaultValue);
                    builderToUseForCurrentParameter.Append("\"");
                }
                else if (publicMethodParameter.ExplicitDefaultValue is char)
                {
                    builderToUseForCurrentParameter.Append("\'");
                    builderToUseForCurrentParameter.Append(publicMethodParameter.ExplicitDefaultValue);
                    builderToUseForCurrentParameter.Append("\'");
                }
                else
                {
                    builderToUseForCurrentParameter.Append(publicMethodParameter.ExplicitDefaultValue);
                }
            }
        }

        nonRemovedArgumentNames.Add(resultName);
        builderToUseForCurrentParameter.Append(",");
    }

    private static string? GetActualReturnType(
        INamedTypeSymbol returnType)
    {
        if (returnType.Arity == 0)
        {
            if (returnType.Name == "Task")
            {
                return null;
            }

            if (returnType.Name == "Void")
            {
                return null;
            }

            if (returnType.Name == "IActionResult")
            {
                return null;
            }

            return returnType.ToString();
        }

        if (returnType.Arity == 1)
        {
            var firstGenericArgument = (INamedTypeSymbol)returnType.TypeArguments.First();

            //Task<XXX>
            if (returnType.Name == "Task")
            {
                //Task<IActionResult>
                if (firstGenericArgument.Name == "IActionResult")
                {
                    return null;
                }
                //Task<ActionResult<XXX>> or Task<ActionResult> 

                if (firstGenericArgument.Name == "ActionResult")
                {
                    if (firstGenericArgument.Arity == 0)
                    {
                        //Task<ActionResult>
                        return null;
                    }

                    //Task<ActionResult<XXX>>
                    return firstGenericArgument.TypeArguments.First().ToString();
                }
                //Task<XXX>

                return firstGenericArgument.ToString();
            }
            //ActionResult<XXX> or ActionResult 

            if (returnType.Name == "ActionResult")
            {
                if (returnType.Arity == 0)
                {
                    //ActionResult
                    return null;
                }

                //ActionResult<XXX>
                return returnType.TypeArguments.First().ToString();
            }
            // Generic<XXX>

            return returnType.ToString();
        }
        // Generic<XXX>

        return returnType.ToString();
    }
}
