using System.Text;

namespace RidgeSourceGenerator;

public static class SourceGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

    public static string GenerateExtensionClass(
        StringBuilder sb,
        ControllerToGenerate controllerToGenerate,
        IEnumerable<MethodToGenerate> generatedMethods,
        CancellationToken cancellationToken)
    {
        var className = $"{controllerToGenerate.Name}Caller";
        
        sb.Append(Header);
        sb.Append(@"
#nullable enable
#pragma warning disable CS0419

using Ridge.Caller;
using Ridge.LogWriter;
using Ridge.Pipeline.Public;
using Ridge.Serialization;
using Ridge.Transformers;
using Ridge.Response;
using Ridge.ActionInfo;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
");
        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.Append(@"namespace ").AppendLine(controllerToGenerate.Namespace);
            sb.AppendLine("{");
        }

        cancellationToken.ThrowIfCancellationRequested();
        
        sb.Append(@"
/// <summary>
/// Strongly typed api client for tests.
/// </summary>
public class ");
        sb.Append(className);
        sb.Append(@"
{
    private readonly HttpClient _httpClient;
    private readonly IServiceProvider _serviceProvider;
    private readonly ILogWriter? _logWriter;
    private readonly IRequestResponseSerializer? _ridgeSerializer;
    private readonly RequestBuilder _requestBuilder = new();

    /// <summary>
    ///     Create controller factory.
    /// </summary>
    /// <param name=""httpClient"">HttpClient used to call the server.</param>
    /// <param name=""serviceProvider"">ServiceProvider used to gather information about the server.</param>
    /// <param name=""logWriter"">
    ///     Used to log requests and responses from server.
    ///     Use <see cref=""XunitLogWriter"" /> or <see cref=""NunitLogWriter"" /> or <see cref=""NunitProgressLogWriter""/> or implement custom <see cref=""ILogWriter"" />
    /// </param>
    /// <param name=""ridgeSerializer"">
    ///     Serializer used to serialize and deserialize requests.
    ///     Serializer is by default chosen based on asp.net settings. If you need custom serializer implement
    ///     <see cref=""IRequestResponseSerializer"" />.
     /// </param>
    public ");
        sb.Append(className);
        sb.AppendLine(@"(
        HttpClient httpClient,
        IServiceProvider serviceProvider,
        ILogWriter? logWriter = null,
        IRequestResponseSerializer? ridgeSerializer = null)
    {
        _httpClient = httpClient;
        _serviceProvider = serviceProvider;
        _logWriter = logWriter;
        _ridgeSerializer = ridgeSerializer;
    }

    /// <summary>
    ///     Add <see cref=""IHttpRequestPipelinePart""/> which will be used to transform <see cref=""HttpRequestMessage""/>s.
    /// </summary>
    /// <param name=""httpRequestPipelineParts""><see cref=""IHttpRequestPipelinePart""/> to add.</param>
    public void AddHttpRequestPipelineParts(
        params IHttpRequestPipelinePart[] httpRequestPipelineParts)
    {
        _requestBuilder.AddHttpRequestPipelineParts(httpRequestPipelineParts);
    }

    /// <summary>
    ///     Adds <see cref=""IActionInfoTransformer""/> which will be later used to transform <see cref=""IActionInfo""/>s.
    /// </summary>
    /// <param name=""actionInfoTransformers""><see cref=""IActionInfoTransformer""/>  to add.</param>
    public void AddActionInfoTransformers(
        params IActionInfoTransformer[] actionInfoTransformers)
    {
        _requestBuilder.AddActionInfoTransformers(actionInfoTransformers);
    }

    /// <summary>
    ///     Adds headers to the requests. This method actually adds <see cref=""IActionInfoTransformer""/>
    ///     which then adds the header to requests.
    /// </summary>
    /// <param name=""headers"">Headers to add.</param>
    public void AddHeaders(params (string Key, string? Value)[] headers)
    {
        _requestBuilder.AddHeaders(headers);
    }

    /// <summary>
    ///     Adds <see cref=""AuthenticationHeaderValue""/> to the requests. This method actually adds <see cref=""IActionInfoTransformer""/>
    ///     which then adds the header to requests.
    /// </summary>
    /// <param name=""authenticationHeaderValue""><see cref=""AuthenticationHeaderValue""/> to add.</param>
    public void AddAuthenticationHeaderValue(
        AuthenticationHeaderValue authenticationHeaderValue)
    {
        _requestBuilder.AddAuthenticationHeaderValue(authenticationHeaderValue);
    }
    ");

        foreach (var methodToGenerate in generatedMethods)
        {
            sb.Append(methodToGenerate.GenerateMethod(cancellationToken));
        }
        
        sb.AppendLine("}");

        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.AppendLine("}");
        }

        cancellationToken.ThrowIfCancellationRequested();
        sb.AppendLine("#pragma warning restore CS0419");
        return sb.ToString();
    }
}
