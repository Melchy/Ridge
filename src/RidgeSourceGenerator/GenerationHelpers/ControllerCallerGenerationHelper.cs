using RidgeSourceGenerator.Dtos;
using System.Text;

namespace RidgeSourceGenerator.GenerationHelpers;

public static class ControllerCallerGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

    public static string GenerateExtensionClass(
        StringBuilder sb,
        ControllerToGenerate controllerToGenerate,
        IEnumerable<MethodToGenerate> generatedMethods,
        CancellationToken cancellationToken)
    {
        var className = $"{controllerToGenerate.Name}Caller";

        sb.Append(Header);
        sb.Append(@"
#nullable enable
#pragma warning disable CS0419

using Ridge.HttpRequestFactoryMiddlewares;
using Ridge.WebApplicationFactoryTools;
using Ridge;
using Ridge.LogWriter;
using Ridge.Serialization;
using Ridge.Response;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
");
        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.Append(@"namespace ").AppendLine(controllerToGenerate.Namespace);
            sb.AppendLine("{");
        }

        cancellationToken.ThrowIfCancellationRequested();

        sb.Append(@"
/// <summary>
/// Generated Api caller. Calls <see cref=""");
        sb.Append(controllerToGenerate.Namespace);
        sb.Append(".");
        sb.Append(controllerToGenerate.Name);
        sb.AppendLine("\" />");
        sb.Append(@"/// </summary>
public class ");
        sb.Append(className);
        sb.Append("<TEntryPoint> where TEntryPoint : class");
        sb.Append(@"
{
    private readonly ApplicationCaller<TEntryPoint> _applicationCaller;
    public ");
        sb.Append(className);

        sb.Append(@"(ApplicationCaller<TEntryPoint> applicationCaller)
    {
        _applicationCaller = applicationCaller;
    }
    ");

        foreach (var methodToGenerate in generatedMethods)
        {
            sb.Append(methodToGenerate.GenerateMethod(cancellationToken));
        }

        sb.AppendLine("}");

        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.AppendLine("}");
        }

        cancellationToken.ThrowIfCancellationRequested();
        sb.AppendLine("#pragma warning restore CS0419");
        
        sb.Append("#nullable restore");
        return sb.ToString();
    }
}
