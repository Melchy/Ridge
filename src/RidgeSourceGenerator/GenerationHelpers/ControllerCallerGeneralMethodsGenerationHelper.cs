using System.Text;

namespace RidgeSourceGenerator.GenerationHelpers;

public static class ControllerCallerGeneralMethodsGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

    public static string GenerateExtensionClass(
        StringBuilder sb,
        string controllerName,
        string? @namespace,
        CancellationToken cancellationToken)
    {
        var className = $"{controllerName}Caller";
        
        sb.Append(Header);
        sb.Append(@"
#nullable enable

using Ridge.WebApplicationFactoryTools;
using Ridge.HttpRequestFactoryMiddlewares;
using Ridge;
using Ridge.LogWriter;
using Ridge.Serialization;
using Ridge.Response;
using Ridge.Setup;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Threading.Tasks;
");
        if (!string.IsNullOrEmpty(@namespace))
        {
            sb.Append(@"namespace ").AppendLine(@namespace);
            sb.AppendLine("{");
        }

        cancellationToken.ThrowIfCancellationRequested();

        sb.Append(@"
/// <summary>
/// Generated API caller. Calls <see cref=""");
        sb.Append(@namespace);
        sb.Append(".");
        sb.Append(controllerName);
        sb.AppendLine("\" />");
        sb.Append(@"/// </summary>
public partial class ");
        sb.Append(className);
        sb.Append("<TEntryPoint> where TEntryPoint : class");
        sb.Append(@"
{
    private ApplicationCaller<TEntryPoint> _applicationCaller;

    /// <summary>
    ///     Create controller caller.
    /// </summary>
    /// <param name=""webApplicationFactory"">Pass WebApplicationFactory{TEntryPoint} to this parameter. This parameter is object because generator can not ensure that containing assembly 
    ///    references correct nuget package.
    /// </param>
    /// <param name=""logWriter"">
    ///     Used to log requests and responses from server.
    ///     Use <see cref=""XunitLogWriter"" /> or <see cref=""NunitLogWriter"" /> or implement custom <see cref=""ILogWriter"" />
    /// </param>
    /// <param name=""ridgeSerializer"">
    ///     Serializer used to serialize and deserialize requests.
    ///     Serializer is by default chosen based on asp.net settings. If you need custom serializer implement
    ///     <see cref=""IRequestResponseSerializer"" />.
    /// </param>
    public ");
        sb.Append(className);
        sb.AppendLine(@"(
        object webApplicationFactory,
        ILogWriter? logWriter = null,
        IRequestResponseSerializer? ridgeSerializer = null)
    {
        _applicationCaller = new ApplicationCaller<TEntryPoint>(webApplicationFactory, logWriter, ridgeSerializer);
    }

    /// <summary>
    ///     Customize WebApplicationFactoryHttpClient by WebApplicationFactoryClientOptions. 
    /// </summary>
    /// <param name=""webApplicationFactoryClientOptions"">Options used to configure WebApplicationFactoryHttpClient.</param>
    public void SetHttpClientOptions(WebAppFactoryClientOptions webApplicationFactoryClientOptions)
    {
        _applicationCaller.SetHttpClientOptions(webApplicationFactoryClientOptions);
    }

    /// <summary>
    ///     Add one or many <see cref=""DelegatingHandler""/> to httpClient.  
    /// </summary>
    /// <param name=""delegatingHandler""><see cref=""DelegatingHandler""/> to add.</param>
    public void AddHttpClientDelegationHandlers(
        params DelegatingHandler[] delegatingHandler)
    {
        _applicationCaller.AddDelegationHandler(delegatingHandler);
    }

    /// <summary>
    ///     Add one or many <see cref=""HttpRequestFactoryMiddleware""/> which will be later used in pipeline to create HttpRequestMessage.
    /// </summary>
    /// <param name=""httpRequestFactoryMiddlewares""><see cref=""HttpRequestFactoryMiddleware""/>  to add.</param>
    public void AddHttpRequestFactoryMiddlewares(
        params HttpRequestFactoryMiddleware[] httpRequestFactoryMiddlewares)
    {
        _applicationCaller.AddHttpRequestFactoryMiddlewares(httpRequestFactoryMiddlewares);
    }

    /// <summary>
    ///     Add one or more headers to the requests. This method actually adds <see cref=""HttpRequestFactoryMiddleware""/>
    ///     which then adds the header to requests.
    /// </summary>
    /// <param name=""headers"">Headers to add.</param>
    public void AddHeaders(
        params HttpHeader[] headers)
    {
        _applicationCaller.AddHeaders(headers);
    }
    ");
        sb.AppendLine("}");

        if (!string.IsNullOrEmpty(@namespace))
        {
            sb.AppendLine("}");
        }

        sb.Append("#nullable restore");

        cancellationToken.ThrowIfCancellationRequested();
        return sb.ToString();
    }
}
