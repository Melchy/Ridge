using RidgeSourceGenerator.Dtos;
using System.Text;

namespace RidgeSourceGenerator.GenerationHelpers;

public static class ControllerClientGenerationHelper
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Ridge source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

    public static string GenerateExtensionClass(
        StringBuilder sb,
        ControllerToGenerate controllerToGenerate,
        IEnumerable<MethodToGenerate> generatedMethods,
        CancellationToken cancellationToken)
    {
        var className = $"{controllerToGenerate.Name}Client";

        sb.Append(Header);
        sb.AppendLine(
            """
            #nullable enable
            #pragma warning disable CS0419
            using Ridge.AspNetCore;
            using Ridge.AspNetCore.Serialization;
            using Ridge.AspNetCore.Response;
            using Ridge.AspNetCore.Parameters;
            using System;
            using System.Collections.Generic;
            using System.Net.Http;
            using System.Threading.Tasks;
            using Microsoft.Extensions.DependencyInjection;
            
            """
        );
        
        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.AppendLine(
                $$"""
                namespace {{controllerToGenerate.Namespace}}
                {
                """ 
            );
        }

        cancellationToken.ThrowIfCancellationRequested();

        sb.Append(
                $$"""
                    /// <summary>
                    /// Generated Api client. Calls <see cref="{{controllerToGenerate.Namespace}}.{{controllerToGenerate.Name}}" />
                    /// </summary>
                    public class {{className}}
                    {
                        private readonly IApplicationClient _applicationClient;
                        /// <summary>
                        /// Creates client for controller. 
                        /// </summary>
                        /// <param name="httpClient">
                        ///     HttpClient which will be used to call application.
                        /// </param>
                        /// <param name="serviceProvider">
                        ///     Application serviceProvider.
                        /// </param>
                        public {{className}}(HttpClient httpClient, IServiceProvider serviceProvider)
                        {
                            var applicationClientFactory = serviceProvider.GetService<IApplicationClientFactory>();
                            if(applicationClientFactory == null)
                            {
                                throw new InvalidOperationException("'IApplicationClientFactory' could not be resolved. Did you forget to call WithRidge()?.");
                            }
                            else
                            {
                                _applicationClient = applicationClientFactory.CreateClient(serviceProvider, httpClient);
                            }
                        }
                        
                """);

        foreach (var methodToGenerate in generatedMethods)
        {
            sb.Append(methodToGenerate.GenerateMethod(cancellationToken));
        }

        sb.AppendLine(" }");

        if (!string.IsNullOrEmpty(controllerToGenerate.Namespace))
        {
            sb.AppendLine("}");
        }

        cancellationToken.ThrowIfCancellationRequested();
        sb.AppendLine("#pragma warning restore CS0419");
        
        sb.Append("#nullable restore");
        return sb.ToString();
    }
}
