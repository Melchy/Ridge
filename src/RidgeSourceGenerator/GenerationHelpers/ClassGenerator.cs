using System.Text;

namespace RidgeSourceGenerator.GenerationHelpers;

public static class ClassGenerator
{
    private const string Header = """
                                  //------------------------------------------------------------------------------
                                  // <auto-generated>
                                  //     This code was generated by the Ridge source generator
                                  //
                                  //     Changes to this file may cause incorrect behavior and will be lost if
                                  //     the code is regenerated.
                                  // </auto-generated>
                                  //------------------------------------------------------------------------------
                                  """;
    
    private const string Usings = """
                                  #nullable enable
                                  #pragma warning disable CS0419
                                  #pragma warning disable CS8669
                                  using Ridge.AspNetCore;
                                  using Ridge.AspNetCore.Serialization;
                                  using Ridge.AspNetCore.Response;
                                  using Ridge.AspNetCore.Parameters;
                                  using System;
                                  using System.Collections.Generic;
                                  using System.Net.Http;
                                  using System.Threading.Tasks;
                                  using Microsoft.Extensions.DependencyInjection;

                                  """;

    public static void Generate(
        StringBuilder sb,
        string className,
        string? namespaceName,
        bool staticClass)
    {
        sb.Append(Header);
        sb.AppendLine(Usings);
        
        if (!string.IsNullOrEmpty(namespaceName))
        {
            sb.AppendLine(
                $$"""
                  namespace {{namespaceName}}
                  {
                  """ 
            );
        }

        GenerateClass(sb, namespaceName, className, staticClass);
        if (!staticClass)
        {
            GenerateConstructorAndProperties(sb, className);
        }
    }

    private static void GenerateClass(
        StringBuilder sb,
        string? namespaceName,
        string className,
        bool staticClass)
    {
        var cref = namespaceName == null ? $"global.{className}" : $"{namespaceName}.{className}";
        var staticWord = staticClass ? "static " : string.Empty;
        sb.Append(
            $$"""
                  /// <summary>
                  /// Generated Api client. Calls <see cref="{{cref}}" />
                  /// </summary>
                  public {{staticWord}} class {{className}}
                  {
              """);
    }

    private static void GenerateConstructorAndProperties(
        StringBuilder sb,
        string className)
    {
        sb.AppendLine();
        sb.Append(
            $$"""
                      private readonly IApplicationClient _applicationClient;
                      /// <summary>
                      /// Creates client for controller. 
                      /// </summary>
                      /// <param name="httpClient">
                      ///     HttpClient which will be used to call application.
                      /// </param>
                      /// <param name="serviceProvider">
                      ///     Application serviceProvider.
                      /// </param>
                      public {{className}}(HttpClient httpClient, IServiceProvider serviceProvider)
                      {
                          var applicationClientFactory = serviceProvider.GetService<IApplicationClientFactory>();
                          if(applicationClientFactory == null)
                          {
                              throw new InvalidOperationException("'IApplicationClientFactory' could not be resolved. Did you forget to call WithRidge()?.");
                          }
                          else
                          {
                              _applicationClient = applicationClientFactory.CreateClient(serviceProvider, httpClient);
                          }
                      }
              """);
    }
}
